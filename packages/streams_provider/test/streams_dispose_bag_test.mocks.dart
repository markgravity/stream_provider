// Mocks generated by Mockito 5.0.5 from annotations
// in streams_provider/test/streams_dispose_bag_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i2;

import 'package:mockito/mockito.dart' as _i1;
import 'package:streams_provider/src/mutable_value_stream.dart' as _i3;

// ignore_for_file: comment_references
// ignore_for_file: unnecessary_parenthesis

class _FakeStreamSubscription<T> extends _i1.Fake
    implements _i2.StreamSubscription<T> {}

/// A class which mocks [MutableValueStream].
///
/// See the documentation for Mockito's code generation for more information.
class MockMutableValueStream<T> extends _i1.Mock
    implements _i3.MutableValueStream<T> {
  MockMutableValueStream() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get hasValue =>
      (super.noSuchMethod(Invocation.getter(#hasValue), returnValue: false)
          as bool);
  @override
  T get value =>
      (super.noSuchMethod(Invocation.getter(#value), returnValue: null) as T);
  @override
  set value(T? newValue) =>
      super.noSuchMethod(Invocation.setter(#value, newValue),
          returnValueForMissingStub: null);
  @override
  bool get isBroadcast =>
      (super.noSuchMethod(Invocation.getter(#isBroadcast), returnValue: false)
          as bool);
  @override
  _i2.Future<int> get length => (super.noSuchMethod(Invocation.getter(#length),
      returnValue: Future<int>.value(0)) as _i2.Future<int>);
  @override
  _i2.Future<bool> get isEmpty =>
      (super.noSuchMethod(Invocation.getter(#isEmpty),
          returnValue: Future<bool>.value(false)) as _i2.Future<bool>);
  @override
  _i2.Future<T> get first => (super.noSuchMethod(Invocation.getter(#first),
      returnValue: Future<T>.value(null)) as _i2.Future<T>);
  @override
  _i2.Future<T> get last => (super.noSuchMethod(Invocation.getter(#last),
      returnValue: Future<T>.value(null)) as _i2.Future<T>);
  @override
  _i2.Future<T> get single => (super.noSuchMethod(Invocation.getter(#single),
      returnValue: Future<T>.value(null)) as _i2.Future<T>);
  @override
  void add(T? data) => super.noSuchMethod(Invocation.method(#add, [data]),
      returnValueForMissingStub: null);
  @override
  _i2.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(null),
      returnValueForMissingStub: Future.value()) as _i2.Future<void>);
  @override
  _i2.Stream<T> asBroadcastStream(
          {void Function(_i2.StreamSubscription<T>)? onListen,
          void Function(_i2.StreamSubscription<T>)? onCancel}) =>
      (super.noSuchMethod(
          Invocation.method(#asBroadcastStream, [],
              {#onListen: onListen, #onCancel: onCancel}),
          returnValue: Stream<T>.empty()) as _i2.Stream<T>);
  @override
  _i2.StreamSubscription<T> listen(void Function(T)? onData,
          {Function? onError, void Function()? onDone, bool? cancelOnError}) =>
      (super.noSuchMethod(
              Invocation.method(#listen, [
                onData
              ], {
                #onError: onError,
                #onDone: onDone,
                #cancelOnError: cancelOnError
              }),
              returnValue: _FakeStreamSubscription<T>())
          as _i2.StreamSubscription<T>);
  @override
  _i2.Stream<T> where(bool Function(T)? test) =>
      (super.noSuchMethod(Invocation.method(#where, [test]),
          returnValue: Stream<T>.empty()) as _i2.Stream<T>);
  @override
  _i2.Stream<S> map<S>(S Function(T)? convert) =>
      (super.noSuchMethod(Invocation.method(#map, [convert]),
          returnValue: Stream<S>.empty()) as _i2.Stream<S>);
  @override
  _i2.Stream<E> asyncMap<E>(_i2.FutureOr<E>? Function(T)? convert) =>
      (super.noSuchMethod(Invocation.method(#asyncMap, [convert]),
          returnValue: Stream<E>.empty()) as _i2.Stream<E>);
  @override
  _i2.Stream<E> asyncExpand<E>(_i2.Stream<E>? Function(T)? convert) =>
      (super.noSuchMethod(Invocation.method(#asyncExpand, [convert]),
          returnValue: Stream<E>.empty()) as _i2.Stream<E>);
  @override
  _i2.Stream<T> handleError(Function? onError,
          {bool Function(dynamic)? test}) =>
      (super.noSuchMethod(
          Invocation.method(#handleError, [onError], {#test: test}),
          returnValue: Stream<T>.empty()) as _i2.Stream<T>);
  @override
  _i2.Stream<S> expand<S>(Iterable<S> Function(T)? convert) =>
      (super.noSuchMethod(Invocation.method(#expand, [convert]),
          returnValue: Stream<S>.empty()) as _i2.Stream<S>);
  @override
  _i2.Future<dynamic> pipe(_i2.StreamConsumer<T>? streamConsumer) =>
      (super.noSuchMethod(Invocation.method(#pipe, [streamConsumer]),
          returnValue: Future<dynamic>.value(null)) as _i2.Future<dynamic>);
  @override
  _i2.Stream<S> transform<S>(_i2.StreamTransformer<T, S>? streamTransformer) =>
      (super.noSuchMethod(Invocation.method(#transform, [streamTransformer]),
          returnValue: Stream<S>.empty()) as _i2.Stream<S>);
  @override
  _i2.Future<T> reduce(T Function(T, T)? combine) =>
      (super.noSuchMethod(Invocation.method(#reduce, [combine]),
          returnValue: Future<T>.value(null)) as _i2.Future<T>);
  @override
  _i2.Future<S> fold<S>(S? initialValue, S Function(S, T)? combine) =>
      (super.noSuchMethod(Invocation.method(#fold, [initialValue, combine]),
          returnValue: Future<S>.value(null)) as _i2.Future<S>);
  @override
  _i2.Future<String> join([String? separator = r'']) =>
      (super.noSuchMethod(Invocation.method(#join, [separator]),
          returnValue: Future<String>.value('')) as _i2.Future<String>);
  @override
  _i2.Future<bool> contains(Object? needle) =>
      (super.noSuchMethod(Invocation.method(#contains, [needle]),
          returnValue: Future<bool>.value(false)) as _i2.Future<bool>);
  @override
  _i2.Future<dynamic> forEach(void Function(T)? action) =>
      (super.noSuchMethod(Invocation.method(#forEach, [action]),
          returnValue: Future<dynamic>.value(null)) as _i2.Future<dynamic>);
  @override
  _i2.Future<bool> every(bool Function(T)? test) =>
      (super.noSuchMethod(Invocation.method(#every, [test]),
          returnValue: Future<bool>.value(false)) as _i2.Future<bool>);
  @override
  _i2.Future<bool> any(bool Function(T)? test) =>
      (super.noSuchMethod(Invocation.method(#any, [test]),
          returnValue: Future<bool>.value(false)) as _i2.Future<bool>);
  @override
  _i2.Stream<R> cast<R>() => (super.noSuchMethod(Invocation.method(#cast, []),
      returnValue: Stream<R>.empty()) as _i2.Stream<R>);
  @override
  _i2.Future<List<T>> toList() =>
      (super.noSuchMethod(Invocation.method(#toList, []),
          returnValue: Future<List<T>>.value(<T>[])) as _i2.Future<List<T>>);
  @override
  _i2.Future<Set<T>> toSet() =>
      (super.noSuchMethod(Invocation.method(#toSet, []),
          returnValue: Future<Set<T>>.value(<T>{})) as _i2.Future<Set<T>>);
  @override
  _i2.Future<E> drain<E>([E? futureValue]) =>
      (super.noSuchMethod(Invocation.method(#drain, [futureValue]),
          returnValue: Future<E>.value(null)) as _i2.Future<E>);
  @override
  _i2.Stream<T> take(int? count) =>
      (super.noSuchMethod(Invocation.method(#take, [count]),
          returnValue: Stream<T>.empty()) as _i2.Stream<T>);
  @override
  _i2.Stream<T> takeWhile(bool Function(T)? test) =>
      (super.noSuchMethod(Invocation.method(#takeWhile, [test]),
          returnValue: Stream<T>.empty()) as _i2.Stream<T>);
  @override
  _i2.Stream<T> skip(int? count) =>
      (super.noSuchMethod(Invocation.method(#skip, [count]),
          returnValue: Stream<T>.empty()) as _i2.Stream<T>);
  @override
  _i2.Stream<T> skipWhile(bool Function(T)? test) =>
      (super.noSuchMethod(Invocation.method(#skipWhile, [test]),
          returnValue: Stream<T>.empty()) as _i2.Stream<T>);
  @override
  _i2.Stream<T> distinct([bool Function(T, T)? equals]) =>
      (super.noSuchMethod(Invocation.method(#distinct, [equals]),
          returnValue: Stream<T>.empty()) as _i2.Stream<T>);
  @override
  _i2.Future<T> firstWhere(bool Function(T)? test, {T Function()? orElse}) =>
      (super.noSuchMethod(
          Invocation.method(#firstWhere, [test], {#orElse: orElse}),
          returnValue: Future<T>.value(null)) as _i2.Future<T>);
  @override
  _i2.Future<T> lastWhere(bool Function(T)? test, {T Function()? orElse}) =>
      (super.noSuchMethod(
          Invocation.method(#lastWhere, [test], {#orElse: orElse}),
          returnValue: Future<T>.value(null)) as _i2.Future<T>);
  @override
  _i2.Future<T> singleWhere(bool Function(T)? test, {T Function()? orElse}) =>
      (super.noSuchMethod(
          Invocation.method(#singleWhere, [test], {#orElse: orElse}),
          returnValue: Future<T>.value(null)) as _i2.Future<T>);
  @override
  _i2.Future<T> elementAt(int? index) =>
      (super.noSuchMethod(Invocation.method(#elementAt, [index]),
          returnValue: Future<T>.value(null)) as _i2.Future<T>);
  @override
  _i2.Stream<T> timeout(Duration? timeLimit,
          {void Function(_i2.EventSink<T>)? onTimeout}) =>
      (super.noSuchMethod(
          Invocation.method(#timeout, [timeLimit], {#onTimeout: onTimeout}),
          returnValue: Stream<T>.empty()) as _i2.Stream<T>);
}
